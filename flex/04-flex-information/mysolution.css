body {
  font-family: 'Courier New', Courier, monospace;
}
.description{
    display: flex;
    justify-content: center;
    align-items: center;
    padding-top: 2em;
}
.barberry, .chili, .pepper, .saffron{
    display: flex;
    flex-direction: column;
    align-items: center;
    margin: auto;
}
.textbox{
    display: flex;
    padding-left: 2em;
    max-width: 200px;
}
img {
    width: 100px;
    height: 100px;
  }
.title {
  font-size: 36px;
  font-weight: 900;
  display: flex; 
  justify-content: center;
}

/* do not edit this footer */
.footer {
  position: fixed;
  bottom: 0;
  left: 0;
  right: 0;
  height: 52px;
  display: flex;
  align-items: center;
  justify-content: center;
  background: #eee;
}

    /*For this exercise, we're required to have the title to be centered on the top of the page and the information boxes centered on a row under it.*/
/*It's looking like we'll have to resort to using _columns_ for the text + images while the containers are assembled on a _row_.*/
/*Check how many flexboxes there potentially are: six (one for title, one for the information row, and one each for the plants' contents.*/
/*Since we'll be using _separate lines_ on the webpage, we won't need a singular flexbox to contain all flexboxes.*/
/*.title is fairly simple with one element inside its container, so we'll just use "display: flex;" and "justify-content: center;" */
/*.img is going to need some help since we're dealing with five flexboxes in a singular row.*/

    /*For our images + descriptions, we're going to need a divider to contain all of plant content.*/
/*We can call it ".description" and create a flexbox for all that material, then we center it with justify-content + align-items.*/
/*Don't forget the padding from the title!*/
/*Now we can see that everything is centered on the page separate from the title, but now we have to separate the text from the images.*/
/*It's time to establish our four flexboxes we mentioned earlier, one for each plant.*/

    /*Since all four flexboxes will be sharing the same properties, we can include all their classes into one descriptor.*/
/*With all plant classes listed, time to get to coding! First, as always, enable flex with "display: flex;".*/
/*Now since our contents will be listed vertically, we will have to arrange the _flex-direction_ into regular columns.*/
/*Center it horizontally with align-items (because the axes have changed) and now we can finish it with margins from the edges of the page.*/
/*But we're not done yet, because the text properties are shared along with the image in the flexbox... We'll have to make one more flexbox.*/

    /*Right now our text is being stretched too long because its following the flexbox of their respective plant.*/
/*We're going to make one more flexbox to correct the padding properties of the text, make it more centered alongside the image.*/
/*We'll have to establish a new class "textbox" where the properties will be assigned to, and establish it for each plant text-section.*/
/*With that out of the way, we enable flex capabilities with display and adding whatever padding value is needed.*/
/*Since our text is too stretched out, we can fix it with adding a maximum width to the container's dimensions*/

/*Be sure to mess around with the dimensions of the page to see if the flex properties are working properly!*/ 

